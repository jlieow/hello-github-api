name: Get github commit details
on:
    push:
        tags:
            - "platform/*/userid/*/terraformx/*/dir/*/v/*"

jobs:
    get_github_details:
        runs-on: ubuntu-latest
        steps:
            - name: Get tag annotation and retrieve secrets
              id: tagger
              run: |
                  echo "Tag: ${GITHUB_REF##*/}"

                  # Gets Git tag reference which contains an annotated tag object reference
                  # Retrieves URL from annotated tag object reference
                  # Retrieves annotated tag message from the URL which contains a JSON string with the keys "env" and "user_id"
                  # Use "env" value to determine which cloud environment to authenticate to
                  # Use the "user_id" value to retrieve the credentials and sign into the cloud environment

                  # tag_response=$(curl "https://api.github.com/repos/jlieow/hello-github-api/git/refs/tags/${GITHUB_REF##*/}" \
                  tag_response=$(curl "https://api.github.com/repos/jlieow/hello-github-api/git/refs/tags/platform/slack/userid/U041VQM5ZTK/terraformx/apply/dir/ec2/v/1" \
                  -H "Accept: application/json" \
                  -H "Content-Type:application/json")

                  url=$(echo $tag_response | jq -r '.object | "\(.url)"')

                  tag_annotations=$(curl "$url" \
                  -H "Accept: application/json" \
                  -H "Content-Type:application/json")

                  tagger_response=$(echo $tag_annotations | jq -r '.tagger')
                  message=$(echo $tag_annotations | jq -r '.message')

                  env=$(echo $message | jq --arg key env -r '.[$key]')
                  user_id=$(echo $message | jq --arg key user_id -r '.[$key]')
                  dir=$(echo $message | jq --arg key dir -r '.[$key]')

                  secrets=$(cat <<EOF
                  ${{ toJson(secrets) }}
                  EOF
                  )

                  echo "env: $env"
                  echo "user_id: $user_id"
                  echo "dir: $dir"
                  echo "secrets: $secrets"

                  # echo "user_id_AWS_ACCESS_KEY_ID: ${user_id}_AWS_ACCESS_KEY_ID"
                  # echo "user_id_AWS_PROFILE_NAME: ${user_id}_AWS_PROFILE_NAME"
                  # echo "user_id_AWS_SECRET_ACCESS_KEY: ${user_id}_AWS_SECRET_ACCESS_KEY"

                  if [ "$env" == "aws" ]; then
                    aws_access_key_id=$(echo $secrets | jq --arg key "${user_id}_AWS_ACCESS_KEY_ID" -r '.[$key]')
                    aws_secret_access_key=$(echo $secrets | jq --arg key "${user_id}_AWS_SECRET_ACCESS_KEY" -r '.[$key]')
                    profile_name=$(echo $secrets | jq --arg key "${user_id}_AWS_PROFILE_NAME" -r '.[$key]')

                    aws configure set aws_access_key_id $aws_access_key_id --profile $profile_name
                    aws configure set aws_secret_access_key $aws_secret_access_key --profile $profile_name

                    echo "profile_name=$profile_name" >> $GITHUB_ENV
                  fi

                  if [ "$env" == "az" ]; then
                    echo "AZ"
                    echo $secrets | jq --arg key "${user_id}_AZ_CLIENT_ID" -r '.[$key]'
                    echo $secrets | jq --arg key "${user_id}_AZ_CLIENT_SECRET" -r '.[$key]'
                    echo $secrets | jq --arg key "${user_id}_AZ_TENANT_ID" -r '.[$key]'
                    echo $secrets | jq --arg key "${user_id}_AZ_SUBSCRIPTION_ID" -r '.[$key]'
                  fi

                  if [ "$env" == "gcp" ]; then
                    echo "GCP"
                  fi

              shell: bash

            # - name: Get output from
            #   run: |
            #     echo "tagger is ${{ steps.tagger.outputs.tagger_response }}"
            #   shell: bash

            - name: See if aws profile configured in previous step exists
              run: |
                  aws configure list
              shell: bash

            - name: Checkout
              uses: actions/checkout@v3

            - name: Replace profile
              run: |
                  echo "--- get aws profile: ${{ env.profile_name }}"

                  echo "-- backend.tfvars before replacing string"
                  cat ec2/backend.tfvars

                  # sed command works differently in linux and mac. You can omit the '' in linux but not in mac.
                  # Equivalent command in mac is: sed -i '' 's/profile = ".*"/profile = "replace"/g' ec2/backend.tfvars
                  sed -i 's/profile = ".*"/profile = "replace"/g' ec2/backend.tfvars

                  echo "-- backend.tfvars after replacing string"
                  cat ec2/backend.tfvars
              shell: bash
